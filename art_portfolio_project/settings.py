"""
Django settings for art_portfolio_project project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Aquí se guarda la clave de Django en el archivo .env, es decir, en las
# variables de entorno (fuente: https://codinggear.blog/django-environment-variables/)
from dotenv import load_dotenv
import os

# Esto me corrige un bug que dice que "Necesitaba Autenticación para poder Enviar un Email"
import django.core.mail.backends.smtp


load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Voy a agarrar la clave de Django de las variables de entorno
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# El Estado del DEBUG también lo voy a guardar en una variable de entorno
DEBUG = os.environ.get('DEBUG')

""" URLs permitidas para entrar a la web app.

Esto es OBLIGATORIO si quiero poner la web app en producción.

Puse que permito todo tipo de URLs para así evitar bugs al momento de usar esta web app usando "runserver" al subirlo a 
Amazon AWS. 
"""
ALLOWED_HOSTS = ['*']


# Application definition

""" I need to add the "art_dashboard_app" app to the list of installed apps.
"""
INSTALLED_APPS = [
    'art_dashboard_app', # App de Dashboard
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'csvexport',  # Esto me permite Exportar la Base de Datos como archivo CSV
    'import_export',  # Esto me permite Exportar cada modelo de la Base de Datos como archivo CSV
    'django.contrib.humanize',  # Esto me dejará poner "." para separar números mayores de 1000
    'storages',  # Esto es para que Amazon EC2 detecte el S3 bucket para detectar la carpeta "static"
    'rest_framework',
    'sslserver',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'art_portfolio_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'art_portfolio_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


""" Esto me dejará usar el modelo "User" para poder agarrar los datos de los usuarios del modelo en donde se guardan
los datos de los usuarios registrados por defecto en Django.

Tengo que editarlo, ya que quiero que NO se puedan repetir los emails. Es decir, quiero que 2 usuarios distintos no
puedan usar el mismo email.
"""
AUTH_USER_MODEL = 'art_dashboard_app.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

""" Separador de Miles.

Esto me dejará poner un punto para leer más fácilmente los números que sean mayores a mil (fuente: 
https://runebook.dev/es/docs/django/ref/settings#std-setting-USE_THOUSAND_SEPARATOR).
"""
USE_THOUSAND_SEPARATOR = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Necesito meter todos los archivos de la carpeta "static" en la carpeta raíz de todo el proyecto para que el CSS y el
# JS se puedan ejecutar en Amazon AWS. Por lo tanto, tendré que hacer una carpeta "static" en la carpeta raíz usando
# "collectstatic".
STATIC_ROOT = os.path.join(BASE_DIR, '/static')
STATIC_URL = 'static/'

STATICFILES_DIRS = [BASE_DIR / 'static']

""" Para subir archivos e imágenes, voy a tener 
que configurar varias cosas en mi proyecto de Django. Primero, tendré que ir a settings.py, y agregar unas líneas que 
digan MEDIA ROOT, y MEDIA URL. Aquí puedo ver mas instrucciones sobre como hacerlo: 
https://www.youtube.com/watch?v=ygzGr51dbsY . 
"""
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

""" Datos de los Emails para enviar correos electrónicos desde Django.

Solo puedo usar "EMAIL_USE_SSL" o "EMAIL_USE_TLS" en el .env, PERO NO los 2 al mismo tiempo. Sino, me dará un bug
de Django.
"""
# Email Principal
EMAIL_ADDRESS = os.environ.get('EMAIL_ADDRESS') # Direccion de Email de
EMAIL_PASSWORD = os.environ.get('EMAIL_PASSWORD')   # Contraseña del Email
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND')
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS')
EMAIL_HOST_USER = EMAIL_ADDRESS
EMAIL_HOST_PASSWORD = EMAIL_PASSWORD
